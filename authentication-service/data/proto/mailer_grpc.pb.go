// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: data/proto/mailer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MailerServiceClient is the client API for MailerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailerServiceClient interface {
	SendRegisterEmailVerification(ctx context.Context, in *RegisterEmailRequest, opts ...grpc.CallOption) (*RegisterEmailResponse, error)
	SendForgotPasswordLinkEmail(ctx context.Context, in *ForgotPasswordRequestEmail, opts ...grpc.CallOption) (*ForgotPasswordResponseEmail, error)
}

type mailerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMailerServiceClient(cc grpc.ClientConnInterface) MailerServiceClient {
	return &mailerServiceClient{cc}
}

func (c *mailerServiceClient) SendRegisterEmailVerification(ctx context.Context, in *RegisterEmailRequest, opts ...grpc.CallOption) (*RegisterEmailResponse, error) {
	out := new(RegisterEmailResponse)
	err := c.cc.Invoke(ctx, "/mailer.MailerService/SendRegisterEmailVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerServiceClient) SendForgotPasswordLinkEmail(ctx context.Context, in *ForgotPasswordRequestEmail, opts ...grpc.CallOption) (*ForgotPasswordResponseEmail, error) {
	out := new(ForgotPasswordResponseEmail)
	err := c.cc.Invoke(ctx, "/mailer.MailerService/SendForgotPasswordLinkEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailerServiceServer is the server API for MailerService service.
// All implementations must embed UnimplementedMailerServiceServer
// for forward compatibility
type MailerServiceServer interface {
	SendRegisterEmailVerification(context.Context, *RegisterEmailRequest) (*RegisterEmailResponse, error)
	SendForgotPasswordLinkEmail(context.Context, *ForgotPasswordRequestEmail) (*ForgotPasswordResponseEmail, error)
	mustEmbedUnimplementedMailerServiceServer()
}

// UnimplementedMailerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMailerServiceServer struct {
}

func (UnimplementedMailerServiceServer) SendRegisterEmailVerification(context.Context, *RegisterEmailRequest) (*RegisterEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRegisterEmailVerification not implemented")
}
func (UnimplementedMailerServiceServer) SendForgotPasswordLinkEmail(context.Context, *ForgotPasswordRequestEmail) (*ForgotPasswordResponseEmail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendForgotPasswordLinkEmail not implemented")
}
func (UnimplementedMailerServiceServer) mustEmbedUnimplementedMailerServiceServer() {}

// UnsafeMailerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailerServiceServer will
// result in compilation errors.
type UnsafeMailerServiceServer interface {
	mustEmbedUnimplementedMailerServiceServer()
}

func RegisterMailerServiceServer(s grpc.ServiceRegistrar, srv MailerServiceServer) {
	s.RegisterService(&MailerService_ServiceDesc, srv)
}

func _MailerService_SendRegisterEmailVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServiceServer).SendRegisterEmailVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mailer.MailerService/SendRegisterEmailVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServiceServer).SendRegisterEmailVerification(ctx, req.(*RegisterEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailerService_SendForgotPasswordLinkEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgotPasswordRequestEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServiceServer).SendForgotPasswordLinkEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mailer.MailerService/SendForgotPasswordLinkEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServiceServer).SendForgotPasswordLinkEmail(ctx, req.(*ForgotPasswordRequestEmail))
	}
	return interceptor(ctx, in, info, handler)
}

// MailerService_ServiceDesc is the grpc.ServiceDesc for MailerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mailer.MailerService",
	HandlerType: (*MailerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRegisterEmailVerification",
			Handler:    _MailerService_SendRegisterEmailVerification_Handler,
		},
		{
			MethodName: "SendForgotPasswordLinkEmail",
			Handler:    _MailerService_SendForgotPasswordLinkEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data/proto/mailer.proto",
}
